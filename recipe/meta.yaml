{% set name = "torchaudio" %}
{% set version = "2.1.0" %}
{% set run_unittests = True %}
# Torchaudio and PyTorch are tightly coupled in terms of versions.
# see compatibility matrix in https://github.com/pytorch/audio/blob/v2.1.2/docs/source/installation.rst#compatibility-matrix
{% set compatible_pytorch = "2.1.0" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/pytorch/audio/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 42e3771c8834266de46b19202a36f8db47eb1bb04ac30e8097aa07843f608fcc

build:
  number: 0
  # See above compatibility matrix
  skip: True  # [py>311]
  script:
    - export USE_FFMPEG=ON                         # [not win]
    - set USE_FFMPEG=ON                            # [win]
    - export BUILD_SOX=OFF                         # [not win]
    - set BUILD_SOX=OFF                            # [win]
    # On linux, Torchaudio's build system will find gnu openmp preferentially to other openmp implementations,
    # and we can't keep gnu openmp out of the host environment due to issues with our openmp packages.
    # That could lead to conflicts with other packages. Turn it off for linux.
    - export USE_OPENMP=OFF                        # [linux]
    - export USE_OPENMP=ON                         # [osx]
    - set USE_OPENMP=ON                            # [win]
    - export BUILD_TORCHAUDIO_PYTHON_EXTENSION=ON  # [not win]
    - set BUILD_TORCHAUDIO_PYTHON_EXTENSION=ON     # [win]
    - export FFMPEG_ROOT=${PREFIX}                 # [not win]
    - set FFMPEG_ROOT=%LIBRARY_PREFIX%             # [win]
    - {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
  missing_dso_whitelist:
    - "**/libc10.so"                # [linux]
    - "**/libtorch_cpu.so"          # [linux]
    - "**/libtorch_python.so"       # [linux]
    - "**/libtorchaudio_ffmpeg.so"  # [linux or osx]
    - "**/libtorchaudio.so"         # [linux or osx]
    - "**/ld64.so.1"                # [s390x]
    - "**/libc10.dylib"             # [osx]
    - "**/libtorch_cpu.dylib"       # [osx]
    - "**/libtorch_python.dylib"    # [osx]
    - "**/torch_cpu.dll"            # [win]
    - "**/c10.dll"                  # [win]
    - "**/torch_python.dll"         # [win]
    - "**/libtorchaudio_ffmpeg.pyd" # [win]
    - "**/libtorchaudio.pyd"        # [win]

requirements:
  build:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - cmake
    - make      # [not win]
    - patchelf  # [linux]
  host:
    - python
    - setuptools
    - wheel
    - pip
    - pytorch {{ compatible_pytorch }}
    - pybind11 2.12.0
    - ffmpeg 6.1.1
    - llvm-openmp  # [osx]
  run:
    - python
    - pytorch {{ compatible_pytorch }}

# ignoring sox tests because we don't integrate sox
{% set ignore_modules =                  " --ignore=test/torchaudio_unittest/backend/soundfile --ignore=test/torchaudio_unittest/backend/dispatcher/soundfile" %}
{% set ignore_modules = ignore_modules + " --ignore=test/torchaudio_unittest/backend/dispatcher/sox --ignore=test/torchaudio_unittest/backend/sox_io" %}
# these tests hang on osx-64, probably resource exhaustion
{% set ignore_modules = ignore_modules + " --ignore=test/torchaudio_unittest/datasets" %}  # [osx and x86_64]
# and these are killed on win and s390x, probably same reason
{% set ignore_modules = ignore_modules + " --ignore=test/torchaudio_unittest/models" %}  # [(linux and s390x) or win]
# these tests import torchaudio.prototype which does not exist in main module
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/prototype --ignore=test/integration_tests/rnnt_pipeline_test.py" %}
# test to skip because of missing flashlight-text
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/ctc_decoder_integration_test.py" %}
# test to skip because of missing dependency deep-phonemizer
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/tacotron2_pipeline_test.py" %}
# skipping this test because of URL errors on osx (these are passing locally though)
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/loudness_compliance_test.py" %}  # [osx]

test:
  source_files:
  {% if run_unittests %}
    - test/torchaudio_unittest
  {% endif %}
    - test/smoke_test
    - test/integration_tests
    - examples
  imports:
    - torchaudio
  commands:
    - pip check
    - python test/smoke_test/smoke_test.py
    - pytest -v {{ ignore_modules }} test/integration_tests
    {% if run_unittests %}
    # dataset provides the dataset for the hubert example test. It's not a runtime requirement.
    - pip install dataset
    - export PYTHONPATH=$PWD/examples/hubert:$PYTHONPATH  # [not win]
    - set PYTHONPATH=%cd%\examples\hubert;%PYTHONPATH%  # [win]
    # We don't provide kaldi-io in our distro, so skip tests that test functionality that requires it
    - pytest -v {{ ignore_modules }} -k "not kaldi" test/torchaudio_unittest
    {% endif %}
  requires:
    - pip
    - pytest
    - typing
    - parameterized
    - scipy
    - numpy <1.24
    - scikit-learn
    - pillow
    - expecttest


about:
  home: https://pytorch.org/audio/stable/index.html
  summary: Torchaudio is a library for audio and signal processing with PyTorch.
  description: |
    The aim of torchaudio is to apply PyTorch to the audio domain. By supporting PyTorch, torchaudio follows the same
    philosophy of providing strong GPU acceleration, having a focus on trainable features through the autograd system,
    and having consistent style (tensor names and dimension names). Therefore, it is primarily a machine learning
    library and not a general signal processing library. The benefits of PyTorch can be seen in torchaudio through
    having all the computations be through PyTorch operations which makes it easy to use and feel like a natural
    extension.
  license: BSD-2-Clause
  license_file: LICENSE
  license_family: BSD
  doc_url: https://pytorch.org/audio/main/torchaudio.html
  dev_url: https://github.com/pytorch/audio

extra:
  recipe-maintainers:
    - boldorider4
  skip-lints:
    - cbc_dep_in_run_missing_from_host
