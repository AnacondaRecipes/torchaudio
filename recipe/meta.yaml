{% set name = "torchaudio" %}
{% set version = "2.1.2" %}
{% set run_unittests = False %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/pytorch/audio/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 82c2745a73172b495327ec36c6970ad5ad9d5d2ac44feeaea2617152f9393bf7

build:
  number: 0
  skip: True  # [py>311]
  script:
    - export USE_FFMPEG=ON                         # [not win]
    - set USE_FFMPEG=ON                            # [win]
    - export BUILD_SOX=OFF                         # [not win]
    - set BUILD_SOX=OFF                            # [win]
    - export USE_OPENMP=ON                         # [not win]
    - set USE_OPENMP=ON                            # [win]
    - export BUILD_TORCHAUDIO_PYTHON_EXTENSION=ON  # [not win]
    - set BUILD_TORCHAUDIO_PYTHON_EXTENSION=ON     # [win]
    - export FFMPEG_ROOT=${PREFIX}                 # [not win]
    - set FFMPEG_ROOT=%LIBRARY_PREFIX%             # [win]
    - {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

requirements:
  build:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - cmake
    - make  # [not win]
    - patchelf  # [linux]
    - protobuf {{ libprotobuf }}
    - llvm-openmp  # [osx]
    - intel-openmp  # [not osx and blas_impl == 'mkl']
  host:
    - python
    - setuptools
    - wheel
    - pip
    - pytorch 2.1.0
    - pybind11
    - ffmpeg 6.1.1
  run:
    - python
    # according to compatibility matrix in
    # https://github.com/pytorch/audio/blob/v2.1.2/docs/source/installation.rst#compatibility-matrix
    - pytorch >=2.1.0,<2.2.0
    # according to optional dependencies
    # https://github.com/pytorch/audio/blob/v2.1.2/docs/source/installation.rst#optional-dependencies
    # in this special case we want users of channel sfe140ed to be able to use the load and save functions, therefore
    # at least ffmpeg (the mightiest of the backends) is specified as a run dependency.
    - {{ pin_compatible('ffmpeg') }}

# ignoring sox tests because we don't integrate sox
{% set ignore_modules =                  " --ignore=test/torchaudio_unittest/backend/soundfile --ignore=test/torchaudio_unittest/backend/dispatcher/soundfile" %}
{% set ignore_modules = ignore_modules + " --ignore=test/torchaudio_unittest/backend/dispatcher/sox --ignore=test/torchaudio_unittest/backend/sox_io" %}
# these tests import torchaudio.prototype which does not exist in main module
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/prototype --ignore=test/integration_tests/rnnt_pipeline_test.py" %}

# test to skip because of missing flashlight-text
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/ctc_decoder_integration_test.py" %}
# test to skip because of missing dependency deep-phonemizer
{% set ignore_modules = ignore_modules + " --ignore=test/integration_tests/tacotron2_pipeline_test.py" %}

# skipping this test because of URL errors on osx (these are passing locally though)
{% set integration_tests_to_skip = "test_loudness" %}  # [osx]

{% if run_unittests %}
# tests to ignore because of unsupported torchaudio function
{% set tests_to_skip = "test_rnnt_loss or test_rnnt_loss_0 or test_rnnt_loss_1 or test_rnnt_loss_2 or test_rnnt_loss_basic_backward or test_rnnt_loss_basic_forward_no_grad" %}
{% set tests_to_skip = tests_to_skip + " or test_rnnt_loss_costs_and_gradients_0 or test_rnnt_loss_costs_and_gradients_1 or test_rnnt_loss_costs_and_gradients_2 or test_rnnt_loss_costs_and_gradients_3" %}
{% set tests_to_skip = tests_to_skip + " or test_rnnt_loss_costs_and_gradients_random_data_with_numpy_fp32_0 or test_rnnt_loss_costs_and_gradients_random_data_with_numpy_fp32_1" %}
{% set tests_to_skip = tests_to_skip + " or test_rnnt_loss_nonfused_softmax or test_rnnt_loss_basic_backward" %}
{% endif %}

test:
  source_files:
  {% if run_unittests %}
    - test/torchaudio_unittest
  {% endif %}
    - test/smoke_test
    - test/integration_tests
    - examples
  imports:
    - torchaudio
  commands:
    - pip check
    # skipping osx x86_64 tests because of segfaults
    #- pip install expecttest dataset kaldi-io  # [not (osx and x86_64)]
    - python test/smoke_test/smoke_test.py
    - pytest -v {{ ignore_modules }} test/integration_tests  # [not (osx and x86_64)]
    - pytest -v {{ ignore_modules }} -k "not ({{ integration_tests_to_skip }})" test/integration_tests  # [osx and x86_64]
    {% if run_unittests %}
    - export PYTHONPATH=$PWD/examples/hubert:$PYTHONPATH  # [not (osx and x86_64) and not win and not s390x]
    - set PYTHONPATH=%cd%\examples\hubert;%PYTHONPATH%  # [win]
    # These tests are long and lead to resource exhaustion on osx-64 and linux-s390x
    - pytest -v {{ ignore_modules }} -k "not ({{ tests_to_skip }})" test/torchaudio_unittest  # [not (osx and x86_64) and not s390x]
    {% endif %}
  requires:
    - pip
    - pytest
    - typing
    - parameterized
    - scipy
    - numpy <1.24
    - scikit-learn
    - pillow
    {% if run_unittests %}
    - expecttest
    - dataset
    - kaldi-io
    {% endif %}


about:
  home: https://pytorch.org/audio/stable/index.html
  summary: Torchaudio is a library for audio and signal processing with PyTorch.
  description: |
    The aim of torchaudio is to apply PyTorch to the audio domain. By supporting PyTorch, torchaudio follows the same
    philosophy of providing strong GPU acceleration, having a focus on trainable features through the autograd system,
    and having consistent style (tensor names and dimension names). Therefore, it is primarily a machine learning
    library and not a general signal processing library. The benefits of PyTorch can be seen in torchaudio through
    having all the computations be through PyTorch operations which makes it easy to use and feel like a natural
    extension.
  license: BSD-2-Clause
  license_file: LICENSE
  license_family: BSD
  doc_url: https://pytorch.org/audio/main/torchaudio.html
  dev_url: https://github.com/pytorch/audio

extra:
  recipe-maintainers:
    - boldorider4
  skip-lints:
    - cbc_dep_in_run_missing_from_host
