{% set name = "torchaudio" %}
{% set version = "2.1.2" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://github.com/pytorch/audio/archive/refs/tags/v{{ version }}.tar.gz
  sha256: 82c2745a73172b495327ec36c6970ad5ad9d5d2ac44feeaea2617152f9393bf7
  # patches:
  #   - 0001-set-include-path.patch

build:
  number: 0
  skip: True  # [py>311]
  # temporarily skip windows until ffmpeg is available
  script:
    - export USE_FFMPEG=ON          # [not win]
    - set USE_FFMPEG=ON             # [win]
    - export BUILD_SOX=OFF          # [not win]
    - set BUILD_SOX=OFF             # [win]
    - export FFMPEG_ROOT=${PREFIX}  # [not win]
    - set FFMPEG_ROOT=%PREFIX%      # [win]
    - export CMAKE_INCLUDE_PATH="${PREFIX}/include"  # [not win]
    - set CMAKE_INCLUDE_PATH=%INCLUDE_INC%           # [win]
    - {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation
    - install_name_tool -add_rpath @loader_path/ $SP_DIR/torchaudio/lib/_torchaudio_ffmpeg.so  # [osx]
    - install_name_tool -add_rpath @loader_path/ $SP_DIR/torchaudio/lib/_torchaudio.so         # [osx]
    - patchelf --set-rpath '$ORIGIN' $SP_DIR/torchaudio/lib/_torchaudio_ffmpeg.so                  # [linux]
    - patchelf --add-rpath '$ORIGIN/../../../..' $SP_DIR/torchaudio/lib/_torchaudio_ffmpeg.so      # [linux]
    - patchelf --add-rpath '$ORIGIN/../../torch/lib' $SP_DIR/torchaudio/lib/_torchaudio_ffmpeg.so  # [linux]
    - patchelf --set-rpath '$ORIGIN/../../torch/lib' $SP_DIR/torchaudio/lib/_torchaudio.so         # [linux]
    - patchelf --add-rpath '$ORIGIN' $SP_DIR/torchaudio/lib/_torchaudio.so                         # [linux]
  ignore_run_exports:
    - pytorch-gpu  # [osx and arm64]
    - libprotobuf  # [osx and arm64]
    - libabseil    # [osx and arm64]
  missing_dso_whitelist:
    - lib/libstdc++.so.*            # [linux]
    - lib/libgcc_s.so.*             # [linux]
    - lib/libgomp.so.*              # [linux]
    - $RPATH/ld64.so.1              # [linux and s390x]
    - x86_64-conda-linux-gnu/sysroot/lib64/libm.so.*        # [linux and x64_64]
    - x86_64-conda-linux-gnu/sysroot/lib64/libc.so.*        # [linux and x64_64]
    - x86_64-conda-linux-gnu/sysroot/lib64/libpthread.so.0  # [linux and x64_64]
    - s390x-conda-linux-gnu/sysroot/lib64/libc.so.*         # [linux and s390x]
    # contained in ffmpeg
    - $RPATH/libavutil.*.dylib      # [osx]
    - $RPATH/libavcodec.*.dylib     # [osx]
    - $RPATH/libavformat.*.dylib    # [osx]
    - $RPATH/libavdevice.*.dylib    # [osx]
    - $RPATH/libavfilter.*.dylib    # [osx]
    - $RPATH/libavutil.so.*         # [linux]
    - $RPATH/libc10.so              # [linux]
    - $RPATH/libavutil.so.*         # [linux]
    - $RPATH/libavformat.so.*       # [linux]
    - $RPATH/libavfilter.so.*       # [linux]
    # libsox shouldn't be activated to begin with
    - $RPATH/libsox.dylib           # [osx]
    # in pytorch package
    - $RPATH/libtorch.dylib         # [osx]
    - $RPATH/libtorch_cpu.dylib     # [osx]
    - $RPATH/libtorch_python.dylib  # [osx]
    - $RPATH/libtorch_cpu.so        # [linux]
    - $RPATH/libtorch_python.so     # [linux]
    - $RPATH/libc10.dylib           # [osx]
    # in protobuf package
    - $RPATH/libprotobuf.*.dylib    # [osx]

requirements:
  build:
    - {{ compiler('cxx') }}
    - {{ compiler('c') }}
    - cmake
    - make  # [not win]
    - patch     # [not win]
    - m2-patch  # [win]
    - patchelf  # [linux]
    - protobuf {{ libprotobuf }}
    - llvm-openmp  # [osx]
    - intel-openmp  # [not osx and blas_impl == 'mkl']
  host:
    - python
    - setuptools
    - wheel
    - pip
    - pytorch 2.1.0
    - pybind11
    - libabseil
    - ffmpeg 6.1.1
  run:
    - python
    # according to compatibility matrix in
    # https://github.com/pytorch/audio/blob/v2.1.2/docs/source/installation.rst#compatibility-matrix
    - pytorch >=2.1.0,<2.2.0
    # according to optional dependencies
    # https://github.com/pytorch/audio/blob/v2.1.2/docs/source/installation.rst#optional-dependencies
    # in this special case we want users of channel sfe140ed to be able to use the load and save functions, therefore
    # at least ffmpeg (the mightiest of the backends) is specified as a run dependency.
    - ffmpeg >=4.4,<7
    # this is not officially required but it is suggested in some upstream build examples and allows the correct library to be used 
    - libprotobuf <4.21.0
  run_constrained:
    # according to optional dependencies
    # https://github.com/pytorch/audio/blob/main/docs/source/installation.rst#optional-dependencies
    # sox has been tested with version 14.4.2, but it is unlikely that other versions will work
    - sox >=14.4.2


{% set ignore_modules =                  " --ignore=test/torchaudio_unittest/backend/soundfile --ignore=test/torchaudio_unittest/backend/dispatcher/soundfile" %}
{% set ignore_modules = ignore_modules + " --ignore=test/torchaudio_unittest/backend/dispatcher/sox --ignore=test/torchaudio_unittest/backend/sox_io" %}

# tests to ignore because of unsupported torchaudio function
{% set tests_to_ignore = "test_rnnt_loss or test_rnnt_loss_0 or test_rnnt_loss_1 or test_rnnt_loss_2 or test_rnnt_loss_basic_backward or test_rnnt_loss_basic_forward_no_grad" %}
{% set tests_to_ignore = tests_to_ignore + " or test_rnnt_loss_costs_and_gradients_0 or test_rnnt_loss_costs_and_gradients_1 or test_rnnt_loss_costs_and_gradients_2 or test_rnnt_loss_costs_and_gradients_3" %}
{% set tests_to_ignore = tests_to_ignore + " or test_rnnt_loss_costs_and_gradients_random_data_with_numpy_fp32_0 or test_rnnt_loss_costs_and_gradients_random_data_with_numpy_fp32_1" %}
{% set tests_to_ignore = tests_to_ignore + " or test_rnnt_loss_nonfused_softmax or test_rnnt_loss_basic_backward" %}
# tests to ignore because of unexpected argument to load() function
{% set tests_to_ignore = tests_to_ignore + " or test_tedlium_release1_path or test_tedlium_release1_str or test_tedlium_release2 or test_tedlium_release3" %}

test:
  source_files:
    - test/torchaudio_unittest
    - examples
  imports:
    - torchaudio
  commands:
    - pip check
    # skipping osx x86_64 tests because of segfaults
    - pip install expecttest dataset kaldi-io  # [not (osx and x86_64)]
    - export PYTHONPATH=$PWD/examples/hubert:$PYTHONPATH  # [not (osx and x86_64)]
    - pytest -v {{ ignore_modules }} -k "not ({{ tests_to_ignore }})" test/torchaudio_unittest  # [not (osx and x86_64)]
  requires:
    - pip
    - pytest
    - parameterized
    - scipy
    - numpy <1.24
    - scikit-learn
    - pillow

about:
  home: https://pytorch.org/audio/stable/index.html
  summary: Torchaudio is a library for audio and signal processing with PyTorch.
  description: |
    The aim of torchaudio is to apply PyTorch to the audio domain. By supporting PyTorch, torchaudio follows the same
    philosophy of providing strong GPU acceleration, having a focus on trainable features through the autograd system,
    and having consistent style (tensor names and dimension names). Therefore, it is primarily a machine learning
    library and not a general signal processing library. The benefits of PyTorch can be seen in torchaudio through
    having all the computations be through PyTorch operations which makes it easy to use and feel like a natural
    extension.
  license: BSD-2-Clause
  license_file: LICENSE
  license_family: BSD
  doc_url: https://pytorch.org/audio/main/torchaudio.html
  dev_url: https://github.com/pytorch/audio

extra:
  recipe-maintainers:
    - boldorider4
  skip-lints:
    - cbc_dep_in_run_missing_from_host
